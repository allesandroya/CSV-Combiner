import csv
import re
import pandas as pd
import os
import win32com.client as win32
from tqdm import tqdm
import time
from tkinter import filedialog
from tkinter import Tk

def select_fac_file():
    fac_path = filedialog.askopenfilename(title="Select the FAC file", filetypes=[("FAC Files", "*.fac")])
    if fac_path:
        directory_path = os.path.dirname(fac_path)
        return fac_path, directory_path
    else:
        print("Cancelled")
        return None, None

# Define the paths
fac_file_path, directory_path = select_fac_file()
if fac_file_path is None:
    exit()

print("Loading the FAC file...")
base_name = os.path.splitext(os.path.basename(fac_file_path))[0]
csv_file_path = os.path.join(directory_path, f'{base_name}.csv')
csv_file_path = os.path.normpath(csv_file_path)

# Read the FAC file, clean data, and write to CSV
data = []
with open(fac_file_path, 'r') as fac_file:
    # Skip the first three rows
    # Read and store the header
    header = next(fac_file).strip().split(',')
    header = [re.sub(r'^"|"$', '', col) for col in header]
    # Skip the next two rows
    next(fac_file)
    next(fac_file)
    
    for line in fac_file:
        # Remove leading and trailing double quotes and commas within quotes using regex
        cleaned_line = re.sub(r'^"|"$', '', line.strip()).split(',')
        # Append the cleaned data to the list
        data.append(cleaned_line)

# Convert the list to DataFrame to remove the first column
df = pd.DataFrame(data)
# Remove the first column
df.drop(df.columns[0], axis=1, inplace=True)

# Write the cleaned DataFrame to CSV
df.to_csv(csv_file_path, index=False, header=False)

print("FAC file has been loaded to CSV.")

# Path to the input CSV file and output XLSB file
xlsb_file_path = os.path.join(directory_path, f'{base_name}.xlsb')
xlsb_file_path = os.path.normpath(xlsb_file_path)
temp_excel_path = os.path.join(directory_path, 'temp_output.xlsx')

# Ensure the CSV file exists
if not os.path.exists(csv_file_path):
    raise FileNotFoundError(f"No such file or directory: '{csv_file_path}'")

print("Processing to XLSB...")

# Read the CSV file into a DataFrame
df = pd.read_csv(csv_file_path, low_memory=False)

# Store the original header
header = list(df.columns)

# Define the maximum rows per sheet
max_rows = 1_000_000

def save_to_xlsb(csv_file_path, xlsb_file_path):
    # Ensure the CSV file exists
    if not os.path.exists(csv_file_path):
        raise FileNotFoundError(f"No such file or directory: '{csv_file_path}'")

    print(f"Processing {csv_file_path} to XLSB...")

    # Read the CSV file into a DataFrame
    df = pd.read_csv(csv_file_path, low_memory=False)

    # Write the DataFrame to a temporary Excel file using xlsxwriter
    temp_excel_path = csv_file_path.replace('.csv', '_temp.xlsx')
    with pd.ExcelWriter(temp_excel_path, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='Sheet1', index=False)
    print("Almost done...")

    # Convert the temporary Excel file to XLSB using Excel via COM
    excel = win32.gencache.EnsureDispatch('Excel.Application')
    excel.DisplayAlerts = False  # Disable any prompts
    try:
        wb = excel.Workbooks.Open(temp_excel_path)
        wb.SaveAs(xlsb_file_path, FileFormat=50)  # 50 is the FileFormat for XLSB
        wb.Close()
        print(f"XLSB file {xlsb_file_path} saved successfully.")
    finally:
        excel.Application.Quit()

    # Clean up the temporary Excel file
    try:
        os.remove(temp_excel_path)
        print(f"Temporary file {temp_excel_path} removed successfully.")
    except PermissionError:
        print(f"PermissionError: Could not remove temporary file. Please delete manually: {temp_excel_path}")

# Function to split the DataFrame into chunks
def split_dataframe(df, chunk_size):
    chunks = []
    for i in range(0, df.shape[0], chunk_size):
        chunks.append(df.iloc[i:i + chunk_size])
    return chunks

# Split the DataFrame into chunks
df_chunks = split_dataframe(df, max_rows)

# Write each chunk to a CSV file with the original header
csv_files = []
for i, chunk in enumerate(df_chunks):
    chunk_file_path = os.path.join(directory_path, f'{base_name}_part{i+1}.csv')
    chunk.to_csv(chunk_file_path, index=False, header=header)
    csv_files.append(chunk_file_path)
    print(f"CSV part {i+1} saved to {chunk_file_path}")

# Convert each CSV file to XLSB
for csv_file_path in csv_files:
    xlsb_file_path = csv_file_path.replace('.csv', '.xlsb')
    save_to_xlsb(csv_file_path, xlsb_file_path)

# Clean up the CSV files
for csv_file_path in csv_files:
    try:
        os.remove(csv_file_path)
        print(f"CSV file {csv_file_path} removed successfully.")
    except PermissionError:
        print(f"PermissionError: Could not remove CSV file. Please delete manually: {csv_file_path}")

print("All CSV files have been converted to XLSB successfully.")
